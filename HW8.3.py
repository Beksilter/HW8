# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.


from ast import literal_eval


class ThisErrorNotANumber(Exception):
    def __init__(self, txt):
        self.txt = txt

print("Введите данные для заполнения списка. В нём не должно быть строк или булевых значений.")
user_list = []

while True:
    user_answer = input("Введите число и нажмите Enter, чтобы продолжить. Нажмите 'q' для выхода.\n")
    if user_answer.lower() not in ["q","й"]:
        try:
            try:
                user_answer = literal_eval(user_answer)
                if type(user_answer) is bool:
                    raise ThisErrorNotANumber("Ошибка, введено значение Bool.")
                else:
                    user_list.append(user_answer)
                    continue
            except ValueError:
                raise ThisErrorNotANumber("Ошибка. введена строка")
        except SyntaxError:
            print("Ошибка ввода. Попробуйте снова.")
            continue
        except ThisErrorNotANumber as e:
            print(e)
            continue
    else:
        break

print(f"Конечный список:\n{user_list}")